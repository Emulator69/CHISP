#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sqlite3 as lite
import re, sys

### Start cookies
def listRows(x, y, z):
    tSet = set()
    q = db.execute('SELECT "{0}" FROM `cookies` WHERE "{1}" = ?;'.format(x, y),
                   (z,))
    
    while True:
        r = q.fetchone()
        if not r:
            break
        else:
            tSet.add(r[0])
    return tSet


def dotsetPurge(tgtSet):
    """Return a sorted and set, list of domains with the leading . removed"""
    tmpList = list(tgtSet - mSet)
    tmpSet = set()
    tmpList2 = []
    for i in tmpList:
       if re.match('\.', i):
           
           ## Add to tmpSet for deletion
           tmpSet.add(i)
           
           ## Add to tmpList2 for addition minus the .
           tmpList2.append('.'.join(i.split('.')[1:]))

    ## Iterate through set of deletes and remove from tmpList           
    for i in tmpSet:
        tmpList.remove(i)

    ## Make final set by combining the lists
    return sorted(list(set(tmpList + tmpList2)))


def setMixer(setX, setY):
    """Generate a set of mixed from setX"""
    tmpSet = set()
    for x in setX:
        for y in setY:
#            print ('Checking %s against %s' % (x, y))
            if x in y:
#                print('Found %s in %s' % (y, x))
                tmpSet.add(x)
    return tmpSet
### End cookies


### Start history



if __name__ == '__main__':
    try:
        if len(sys.argv) != 3:
            print('usage:\n  ./chisp <cookies file> <history file>\n')
            sys.exit(1)
    except:
        sys.exit(1)
        
    ## Cookies begin here
    con = lite.connect(sys.argv[1])
    con.text_factory = str
    db = con.cursor()
    
    ## Initial list of unsecure
    uSet = listRows('host_key', 'secure', '0')
    
    ## Initial list of secure
    sSet = listRows('host_key', 'secure', '1')
    
    ## Generate mixed result verifiers, then merge
    umSet = setMixer(sSet, uSet)
    smSet = setMixer(uSet, sSet)
    mSet = smSet.union(umSet)

    ## Obtain final lists, sorted and cleaned up
    uFinal = dotsetPurge(uSet)
    sFinal = dotsetPurge(sSet)
    
    ## Cleanup
    con.close()




    ## History begins here
    con = lite.connect(sys.argv[2])
    con.text_factory = str
    db = con.cursor()
    
    ## Grab urls
    q = db.execute('SELECT `url` FROM `urls`;')
    urlUSet = set()
    urlSSet = set()
    while True:
        r = q.fetchone()
        if not r:
            break
        else:
            if re.match('https://', r[0]):
                urlSSet.add(r[0].split('/')[2])
            else:
                urlUSet.add(r[0].split('/')[2])
            

    ## Find out if any of the uFinal is in history!
    vulnSites = urlSSet.intersection(set(uFinal))
    possibleVulns = urlUSet.intersection(set(uFinal))
    
    ## Finish
    with open('vulnSites.lst', 'w') as oFile:
        for i in vulnSites:
            oFile.write(i + '\n')
    with open('possibleVulns.lst', 'w') as oFile:
        for i in vulnSites:
            oFile.write(i + '\n')
    print('\nvulnSites.lst is a list of sites highly suspected to be vulnerable to session hijacking')
    print('possibleVulns.lst is a list of sites somewhat suspected to be vulnerable to session hijacking\n')

    ## Cleanup
    con.close()
